#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_NV_mesh_shader : enable

layout(local_size_x=32) in;
layout(max_vertices=4 * 32, max_primitives=2 * 32) out;
layout(triangles) out;

layout(location=0) out vec3 v_color[];
layout(location=1) out vec3 v_residue_coord[];
layout(location=2) out vec2 v_uv[];

#include "PushConstant.glsl"

void main()
{
    uint idx = gl_LocalInvocationID.x;

    vec4 offset = pc.pc.mvp * vec4(idx, gl_WorkGroupID.x, 0, 0);

    gl_MeshVerticesNV[4 * idx + 0].gl_Position = offset + pc.pc.mvp * vec4(0, 0, 0, 1);
    gl_MeshVerticesNV[4 * idx + 1].gl_Position = offset + pc.pc.mvp * vec4(1, 0, 0, 1);
    gl_MeshVerticesNV[4 * idx + 2].gl_Position = offset + pc.pc.mvp * vec4(0, 0, 1, 1);
    gl_MeshVerticesNV[4 * idx + 3].gl_Position = offset + pc.pc.mvp * vec4(1, 0, 1, 1);

    v_color[4 * idx + 0] = vec3(1, 0, 1);
    v_color[4 * idx + 1] = vec3(1, 0, 1);
    v_color[4 * idx + 2] = vec3(1, 0, 1);
    v_color[4 * idx + 3] = vec3(1, 0, 1);

    v_residue_coord[4 * idx + 0] = vec3(idx + 0, gl_WorkGroupID.x, 0);
    v_residue_coord[4 * idx + 1] = vec3(idx + 1, gl_WorkGroupID.x, 0);
    v_residue_coord[4 * idx + 2] = vec3(idx + 0, gl_WorkGroupID.x, 1);
    v_residue_coord[4 * idx + 3] = vec3(idx + 1, gl_WorkGroupID.x, 1);

    v_uv[4 * idx + 0] = vec2(0, 0);
    v_uv[4 * idx + 1] = vec2(1, 0);
    v_uv[4 * idx + 2] = vec2(0, 1);
    v_uv[4 * idx + 3] = vec2(1, 1);

    gl_PrimitiveIndicesNV[6 * idx + 0] = 4 * idx + 0;
    gl_PrimitiveIndicesNV[6 * idx + 1] = 4 * idx + 1;
    gl_PrimitiveIndicesNV[6 * idx + 2] = 4 * idx + 2;
    gl_PrimitiveIndicesNV[6 * idx + 3] = 4 * idx + 2;
    gl_PrimitiveIndicesNV[6 * idx + 4] = 4 * idx + 1;
    gl_PrimitiveIndicesNV[6 * idx + 5] = 4 * idx + 3;

    if (idx == 0) gl_PrimitiveCountNV = 2 * 32;
}
